


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             RESET, DATA, READONLY
    2 00000000                 EXPORT           __Vectors
    3 00000000         
    4 00000000         __Vectors
    5 00000000 10001000        DCD              0x10001000  ; Initial Stack Poi
                                                            nter (dummy)
    6 00000004 00000000        DCD              Reset_Handler ; Reset Handler a
                                                            ddress
    7 00000008                 ALIGN
    8 00000008         
    9 00000008                 AREA             mycode, CODE, READONLY
   10 00000000                 ENTRY
   11 00000000                 EXPORT           Reset_Handler
   12 00000000         
   13 00000000         ;-------------------------
   14 00000000         ; Reset_Handler - Selection Sort
   15 00000000         ;-------------------------
   16 00000000         Reset_Handler
   17 00000000 4817            LDR              R0, =SRC    ; R0 = pointer to a
                                                            rray base
   18 00000002 F04F 010A       MOV              R1, #10     ; R1 = array length
                                                             (10)
   19 00000006         
   20 00000006         ; Outer loop: for i = 0 to n-2
   21 00000006 F04F 0200       MOV              R2, #0      ; i = 0
   22 0000000A         
   23 0000000A         OuterLoop
   24 0000000A 428A            CMP              R2, R1
   25 0000000C DA27            BGE              Done        ; if i >= n, done
   26 0000000E         
   27 0000000E F1A1 0301       SUB              R3, R1, #1  ; last index = n-1
   28 00000012 429A            CMP              R2, R3
   29 00000014 DA23            BGE              Done        ; if i >= n-1, done
                                                            
   30 00000016         
   31 00000016 4614            MOV              R4, R2      ; min_index = i
   32 00000018 EB00 0582       ADD              R5, R0, R2, LSL #2 
                                                            ; R5 = &array[i]
   33 0000001C 682E            LDR              R6, [R5]    ; min_value = array
                                                            [i]
   34 0000001E         
   35 0000001E F102 0701       ADD              R7, R2, #1  ; j = i + 1
   36 00000022         
   37 00000022         InnerLoop
   38 00000022 428F            CMP              R7, R1
   39 00000024 DA0A            BGE              Swap        ; if j >= n, swap m
                                                            in_index and i
   40 00000026         
   41 00000026 EB00 0887       ADD              R8, R0, R7, LSL #2 
                                                            ; R8 = &array[j]
   42 0000002A F8D8 9000       LDR              R9, [R8]    ; value = array[j]
   43 0000002E         
   44 0000002E 45B1            CMP              R9, R6
   45 00000030 DA01            BGE              NoChange    ; if value >= min_v
                                                            alue, skip
   46 00000032         
   47 00000032 463C            MOV              R4, R7      ; min_index = j
   48 00000034 464E            MOV              R6, R9      ; min_value = value
                                                            



ARM Macro Assembler    Page 2 


   49 00000036         
   50 00000036         NoChange
   51 00000036 F107 0701       ADD              R7, R7, #1  ; j++
   52 0000003A E7F2            B                InnerLoop
   53 0000003C         
   54 0000003C         Swap
   55 0000003C 4294            CMP              R4, R2
   56 0000003E D00B            BEQ              NoSwap      ; if min_index == i
                                                            , no swap needed
   57 00000040         
   58 00000040         ; Swap array[i] and array[min_index]
   59 00000040 EB00 0582       ADD              R5, R0, R2, LSL #2
   60 00000044 EB00 0884       ADD              R8, R0, R4, LSL #2
   61 00000048         
   62 00000048 F8D5 9000       LDR              R9, [R5]
   63 0000004C F8D8 A000       LDR              R10, [R8]
   64 00000050         
   65 00000050 F8C5 A000       STR              R10, [R5]
   66 00000054 F8C8 9000       STR              R9, [R8]
   67 00000058         
   68 00000058         NoSwap
   69 00000058 F102 0201       ADD              R2, R2, #1  ; i++
   70 0000005C E7D5            B                OuterLoop
   71 0000005E         
   72 0000005E         Done
   73 0000005E E7FE            B                Done        ; Infinite loop - s
                                                            orting complete
   74 00000060         
   75 00000060         ;-------------------------
   76 00000060         ; Data Section
   77 00000060         ;-------------------------
   78 00000060 00000000        AREA             mydata, DATA, READWRITE
   79 00000000 000ABCDF 
              00012345 
              0000DCEF 
              00AB1234 
              00001032 
              21231223 
              0023FE1A 
              00AB564E 
              00012345 
              ABCDE123 SRC     DCD              0x00ABCDF, 0x0012345, 0x000DCEF
, 0x0AB1234, 0x0001032, 0x21231223, 0x0023FE1A, 0x0AB564E, 0x0012345, 0xABCDE12
3
   80 00000028         
   81 00000028                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=Q1.d -oQ
1.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LP
C17xx --predefine="__EVAL SETA 1" --list=Q1.lst Q1.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 1 in file Q1.asm
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 4 in file Q1.asm
   Uses
      At line 2 in file Q1.asm
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Done 0000005E

Symbol: Done
   Definitions
      At line 72 in file Q1.asm
   Uses
      At line 25 in file Q1.asm
      At line 29 in file Q1.asm
      At line 73 in file Q1.asm

InnerLoop 00000022

Symbol: InnerLoop
   Definitions
      At line 37 in file Q1.asm
   Uses
      At line 52 in file Q1.asm
Comment: InnerLoop used once
NoChange 00000036

Symbol: NoChange
   Definitions
      At line 50 in file Q1.asm
   Uses
      At line 45 in file Q1.asm
Comment: NoChange used once
NoSwap 00000058

Symbol: NoSwap
   Definitions
      At line 68 in file Q1.asm
   Uses
      At line 56 in file Q1.asm
Comment: NoSwap used once
OuterLoop 0000000A

Symbol: OuterLoop
   Definitions
      At line 23 in file Q1.asm
   Uses
      At line 70 in file Q1.asm
Comment: OuterLoop used once
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 16 in file Q1.asm
   Uses
      At line 6 in file Q1.asm
      At line 11 in file Q1.asm

Swap 0000003C

Symbol: Swap
   Definitions
      At line 54 in file Q1.asm
   Uses
      At line 39 in file Q1.asm
Comment: Swap used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

mycode 00000000

Symbol: mycode
   Definitions
      At line 9 in file Q1.asm
   Uses
      None
Comment: mycode unused
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SRC 00000000

Symbol: SRC
   Definitions
      At line 79 in file Q1.asm
   Uses
      At line 17 in file Q1.asm
Comment: SRC used once
mydata 00000000

Symbol: mydata
   Definitions
      At line 78 in file Q1.asm
   Uses
      None
Comment: mydata unused
2 symbols
345 symbols in table
